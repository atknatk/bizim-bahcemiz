@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
<div class="order-summary-content mb-4">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="row">
                <div class="col-md-8 mb-3">
                    <div class="table-wrapper table-responsive">
                        <table class="cart table table-bordered jsmartable">
                            <colgroup>
                                @if (Model.IsEditable)
                                {
                                    <col width="1" />
                                }
                                @if (Model.ShowProductImages)
                                {
                                    <col width="1" />
                                }
                                <col />
                                @if (Model.ShowVendorName)
                                {
                                    <col width="1" />
                                }
                                @if (Model.ShowSku)
                                {
                                    <col width="1" />
                                }
                                <col width="1" />
                                <col width="1" />
                                <col width="1" />
                            </colgroup>
                            <thead>
                                <tr>
                                    <th class="d-lg-none">@T("NopStation.Theme.Viridi.ShoppingCart.Info")</th>
                                    @if (Model.IsEditable)
                                    {
                                        <th class="remove-from-cart" data-breakpoint="md">
                                            @T("ShoppingCart.Remove")
                                        </th>
                                    }
                                    @if (Model.ShowProductImages)
                                    {
                                        <th class="product-picture">
                                            @T("ShoppingCart.Image")
                                        </th>
                                    }
                                    @if (Model.ShowVendorName)
                                    {
                                        <th class="vendor">
                                            @T("ShoppingCart.VendorName")
                                        </th>
                                    }
                                    <th class="product">
                                        @T("ShoppingCart.Product(s)")
                                    </th>

                                    @if (Model.ShowSku)
                                    {
                                        <th class="sku" data-breakpoint="md">
                                            @T("ShoppingCart.SKU")
                                        </th>
                                    }
                                    <th class="unit-price" data-breakpoint="sm">
                                        @T("ShoppingCart.UnitPrice")
                                    </th>
                                    <th class="quantity" data-breakpoint="sm">
                                        @T("ShoppingCart.Quantity")
                                    </th>
                                    <th class="subtotal" data-breakpoint="sm">
                                        @T("ShoppingCart.ItemTotal")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {
                                <tr>
                                    <td class="d-lg-none all-center"></td>
                                    @if (Model.IsEditable)
                                    {
                                        @* for small device expand button *@

                                        <td class="remove-from-cart">
                                            @if (item.DisableRemoval)
                                            {
                                                <text>&nbsp;</text>
                                            }
                                            else
                                            {

                                                <button type="button" class="remove-button btn btn-default"> <i class="fa fa-trash-alt"></i>  </button>
                                                <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" />
                                                <label for="removefromcart@(item.Id)" style="display: none !important;"></label>
                                            }
                                        </td>
                                    }
                                    @if (Model.ShowProductImages)
                                    {
                                        <td class="product-picture">
                                            <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                        </td>
                                    }
                                    @if (Model.ShowVendorName)
                                    {
                                        <td class="vendor">
                                            <label class="td-title sr-only">@T("ShoppingCart.VendorName"):</label>
                                            <span class="vendor-name">@item.VendorName</span>
                                        </td>
                                    }
                                    <td class="product" data-heading="@T("ShoppingCart.Product(s)")">
                                        <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})" class="product-name">@item.ProductName</a>
                                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                        {
                                            <div class="recurring-info">
                                                @Html.Raw(item.RecurringInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RentalInfo))
                                        {
                                            <div class="rental-info">
                                                @Html.Raw(item.RentalInfo)
                                            </div>
                                        }
                                        @if (Model.IsEditable && item.AllowItemEditing)
                                        {
                                            var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                            editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                            <div class="edit-item">
                                                <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                            </div>
                                        }
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li>@Html.Raw(warning)</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </td>
                                    @if (Model.ShowSku)
                                    {
                                        <td class="sku" data-heading=" @T("ShoppingCart.SKU")">
                                            <label class="td-title sr-only">@T("ShoppingCart.SKU"):</label>
                                            <span class="sku-number">@item.Sku</span>
                                        </td>
                                    }
                                    <td class="unit-price" data-heading="@T("ShoppingCart.UnitPrice")">
                                        <label class="td-title sr-only">@T("ShoppingCart.UnitPrice"):</label>
                                        <span class="product-unit-price">@item.UnitPrice</span>
                                    </td>
                                    <td class="quantity" data-heading="@T("ShoppingCart.Quantity")">
                                        <label class="td-title sr-only" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                                        @if (Model.IsEditable)
                                        {
                                            if (item.AllowedQuantities.Count > 0)
                                            {
                                                <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown form-control">
                                                    @foreach (var qty in item.AllowedQuantities)
                                                    {
                                                        <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control" />
                                            }
                                        }
                                        else
                                        {
                                            <span class="product-quantity">@item.Quantity</span>
                                        }
                                    </td>
                                    <td class="subtotal" data-heading="@T("ShoppingCart.ItemTotal")">
                                        <label class="td-title sr-only">@T("ShoppingCart.ItemTotal"):</label>
                                        <span class="product-subtotal">@item.SubTotal</span>
                                        @if (!string.IsNullOrEmpty(item.Discount))
                                        {
                                            <div class="discount">
                                                @T("ShoppingCart.ItemYouSave", item.Discount)
                                            </div>
                                            if (item.MaximumDiscountedQty.HasValue)
                                            {
                                                <div class="discount-additional-info">
                                                    @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                </div>
                                            }
                                        }
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                    {
                        var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <div class="tax-shipping-info">
                            @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                        </div>
                    }
                    @if (Model.IsEditable)
                    {
                        <div class="common-buttons text-center pt-3">
                            <input type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" />
                            <input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />
                        </div>
                    }

                </div>
                <div class="col-md-4">
                    <div class="cart-options">
                        @if (Model.IsEditable)
                        {
                            <button class="cart-option-header" type="button" data-toggle="collapse" data-target="#gift-wrapping" aria-expanded="true" aria-controls="gift-wrapping">
                                @await Component.InvokeAsync("SelectedCheckoutAttributes")
                            </button>
                            <div id="gift-wrapping" class="collapse collapsed" aria-labelledby="headingOne">
                                <div class="card-body">
                                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                                </div>
                            </div>
                        }
                    </div>

                    <div class="cart-footer">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                        @if (Model.IsEditable)
                        {
                            <div class="cart-options">
                                <button class="cart-option-header" type="button" data-toggle="collapse" data-target="#discount-code" aria-expanded="true" aria-controls="discount-code">
                                    @T("ShoppingCart.DiscountCouponCode")
                                </button>
                                <div id="discount-code" class="cart-coupon-code collapse collapsed">

                                    <div class="cart-collaterals card-body">
                                        <div class="deals">
                                            @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                            @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                                        </div>

                                    </div>
                                </div>
                            </div>

                            <div class="cart-options">
                                <button class="cart-option-header" type="button" data-toggle="collapse" data-target="#estimate-shipping" aria-expanded="true" aria-controls="estimate-shipping">
                                    @T("ShoppingCart.EstimateShipping")
                                </button>
                                <div id="estimate-shipping" class="cart-coupon-code collapse collapsed">

                                    <div class="cart-collaterals card-body">
                                        <div class="estimate-shipping-box pb-2">
                                            @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                                        </div>
                                    </div>
                                </div>
                            </div>


                        }
                        <div class="confurm-order-box">
                            <div class="totals">
                                @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                                @if (Model.IsEditable)
                                {
                                    if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                                    {
                                        <div class="min-amount-warning">
                                            @Model.MinOrderSubtotalWarning
                                        </div>
                                    }
                                }
                                @if (Model.IsEditable)
                                {
                                    if (Model.TermsOfServiceOnShoppingCartPage)
                                    {
                                        <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                            <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                        </div>
                                        <div class="terms-of-service">
                                            <input id="termsofservice" type="checkbox" name="termsofservice" />
                                            <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                            @if (Model.TermsOfServicePopup)
                                            {
                                                <a class="read btn btn-link px-0" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                                <script asp-location="Footer">
                                                    $(document).ready(function() {
                                                        $('#read-terms').on('click',
                                                            function(e) {
                                                                e.preventDefault();
                                                                displayPopupContentFromUrl(
                                                                    '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                                    '@T("Checkout.TermsOfService")');
                                                            });
                                                    });
                                                </script>
                                            }
                                            else
                                            {
                                                <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                            }
                                        </div>
                                    }
                                    <div class="checkout-buttons">
                                        @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                        {
                                            <script asp-location="Footer">
                                                $(document).ready(function () {
                                                    $('#checkout').on('click', function () {
                                                        //terms of service
                                                        var termOfServiceOk = true;
                                                        if ($('#termsofservice').length > 0) {
                                                            //terms of service element exists
                                                            if (!$('#termsofservice').is(':checked')) {
                                                                $("#terms-of-service-warning-box").dialog();
                                                                termOfServiceOk = false;
                                                            } else {
                                                                termOfServiceOk = true;
                                                            }
                                                        }
                                                        return termOfServiceOk;
                                                    });
                                                });
                                            </script>
                                            if (orderSettings.CheckoutDisabled)
                                            {
                                                <div class="checkout-disabled">
                                                    @T("Checkout.Disabled")
                                                </div>
                                            }
                                            else
                                            {
                                                <button type="submit" id="checkout" name="checkout" value="checkout" class="theme-button btn-block checkout-button">
                                                    @T("Checkout.Button")
                                                </button>
                                            }
                                        }
                                    </div>
                                    <div class="addon-buttons">
                                        @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                        @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                        {
                                            @await Component.InvokeAsync(pm)
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                @if (Model.IsEditable)
                {
                    @await Component.InvokeAsync("CrossSellProducts")
                }
            </div>
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>

<script asp-location="Footer">


</script>