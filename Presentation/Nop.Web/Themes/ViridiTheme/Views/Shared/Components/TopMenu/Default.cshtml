@model TopMenuModel
    <ul class="top-menu navbar-nav default-menu-web">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore })
        @if (Model.DisplayHomepageMenuItem)
        {
            // (atakan) class="nav-link"  sonradan eklendi
            <li class="nav-products"><a class="nav-link" href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
        }
        @{
            var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
        }
        @foreach (var category in rootCategories)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
            {
                Category = category
            };
            @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
        }

        @foreach (var topic in Model.Topics)
        {
            <li class="nav-products"><a class="nav-link" href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
        }
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li class="nav-products"><a class="nav-link"  href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
        }
        @if (Model.DisplayProductSearchMenuItem)
        {
            <li class="nav-products"><a class="nav-link"  href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li class="nav-products"><a class="nav-link"  href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li class="nav-products"><a class="nav-link"  href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li class="nav-products"><a class="nav-link"  href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li class="nav-products"><a class="nav-link"  href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuAfter })
    </ul>
@{
    var rootCategoriesResponsive = Model.Categories.ToList();
    //name it "Categories" if we have only categories. Otherwise, "Menu"
    var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
    <div class="menu-toggle d-none">@responsiveMenuTitle</div>
    <ul class="top-menu mobile d-none">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore })
        @if (Model.DisplayHomepageMenuItem)
        {
            // (atakan) class="nav-link"  sonradan eklendi
          <li class="nav-products"><a class="nav-link" href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
        }
        @foreach (var category in rootCategoriesResponsive)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
            {
                Category = category,
                ResponsiveMobileMenu = true
            };
            @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
        }
        @foreach (var topic in Model.Topics)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
        }
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
        }
        @if (Model.DisplayProductSearchMenuItem)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li class="nav-products"><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter })
    </ul>
    <script asp-location="Footer">
        //$(document).ready(function () {
        //    $('.menu-toggle').on('click', function () {
        //        $(this).siblings('.top-menu.mobile').slideToggle('slow');
        //    });
        //    $('.top-menu.mobile .sublist-toggle').on('click', function () {
        //        $(this).siblings('.sublist').slideToggle('slow');
        //    });
        //});
    </script>
}